" Set syntax scheme to json and format it (by using python, make sure it is installed)
command Json set syntax=json | execute '%!python -m json.tool'

highlight GitGutterAdd    ctermfg=2
highlight GitGutterChange ctermfg=3
highlight GitGutterDelete ctermfg=1

let g:gitgutter_map_keys = 0
"
let g:ctrlsf_auto_close = {
      \ "normal" : 0,
      \ "compact": 0
      \}
let g:ctrlsf_default_view_mode = 'compact'

let g:ranger_map_keys = 0

" Disable preview window (for e.g. :GFiles)
let g:fzf_preview_window = ''

let g:NERDCustomDelimiters = { 'javascript.tsx': { 'left': '//', 'leftAlt': '{/*', 'rightAlt': '*/}' } }
let g:NERDCustomDelimiters = { 'typescript.tsx': { 'left': '//', 'leftAlt': '{/*', 'rightAlt': '*/}' } }
let g:NERDTreeWinSize=50

" NERDTree File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
highlight Directory guibg=NONE ctermbg=NONE

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeQuitOnOpen = 1
let NERDTreeShowHidden = 1
let NERDTreeCascadeSingleChildDir = 0

let g:vim_ai_chat = {
\  "options": {
\    "model": "gpt-4",
\  },
\}

" =============================================================
" Coc Settings
" =============================================================

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

hi CocUnusedHighlight ctermfg=250
hi CocMenuSel ctermbg=22
hi CocSearch ctermfg=184

if dotfilesTheme =~ '-light$'
  hi CocHighlightText ctermbg=248
endif

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

let g:coc_snippet_next = '<tab>'

let g:coc_global_extensions = ['coc-snippets']

function! JumpToSameIndent(direction, inVisualMode)
  let line = line('.')

  let currentLine = line
  let matchIndent = 0
  while !matchIndent && currentLine != line('$') + 1 && currentLine != -1
    let currentLine += a:direction == 'down' ? 1 : -1
    let lineText = getline(currentLine)
    let matchIndent = lineText !~ '^\s*$' && trim(lineText) !~ '^[\]\)\}]$' && indent(currentLine) == indent('.')
  endwhile

  if (matchIndent)
    if (a:inVisualMode)
      norm! gv
    endif

    execute 'norm! ' . currentLine . 'G'
  endif
endfunction

let g:copilot_filetypes = {
    \ 'gitcommit': v:true,
    \ 'markdown': v:true,
    \ 'yaml': v:true
    \ }

source $HOME/.dotfiles/vim/dev/statusline.vim
source $HOME/.dotfiles/vim/dev/mappings.vim

" match buffer navigator colors with current theme
execute 'autocmd FileType buffernavigator highlight BufferNavigatorModifiedFile ctermfg=' . accentText . ' ctermbg=NONE' 
execute 'autocmd FileType buffernavigator highlight BufferNavigatorFile ctermfg=' . secondaryText . ' ctermbg=NONE' 

if dotfilesTheme =~ '-light$'
  autocmd FileType buffernavigator highlight BufferNavigatorDir ctermfg=0 ctermbg=NONE 
endif
