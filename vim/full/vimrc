" Set syntax scheme to json and format it (by using python, make sure it is installed)
command Json set syntax=json | execute '%!python -m json.tool'

highlight GitGutterAdd    ctermfg=2
highlight GitGutterChange ctermfg=3
highlight GitGutterDelete ctermfg=1

let g:gitgutter_map_keys = 0
"
let g:ctrlsf_auto_close = {
      \ "normal" : 0,
      \ "compact": 0
      \}
let g:ctrlsf_default_view_mode = 'compact'
let g:ctrlsf_backend = 'rg'

" Disable preview window (for e.g. :GFiles)
let g:fzf_preview_window = ''

let g:NERDCustomDelimiters = {
      \ 'javascript.tsx': { 'left': '//', 'leftAlt': '{/*', 'rightAlt': '*/}' },
      \ 'typescript.tsx': { 'left': '//', 'leftAlt': '{/*', 'rightAlt': '*/}' },
      \ 'css': { 'left': '/*', 'right': '*/' }
      \ }
let g:NERDTreeWinSize=50

" NERDTree File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
highlight Directory guibg=NONE ctermbg=NONE

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeQuitOnOpen = 1
let NERDTreeShowHidden = 1
let NERDTreeCascadeSingleChildDir = 0

let g:vim_ai_chat = {
\  "options": {
\    "model": "gpt-4",
\  },
\}

let g:context_filetype_blacklist = ["nerdtree", "buffernavigator"]
let g:context_highlight_tag = '<hide>'
let g:context_add_mappings = 0
let g:context_enabled = 0

let g:mergetool_layout = 'b,mr'

" Disable this fix dince it has to side effects: It cancels commands and when
" opening a pane bc there is not yet one open, it does not run a proper zsh
" but a basic sh
" Actual fix: See https://github.com/preservim/vimux/issues/230
" to avoid the error message "E605: Exception not caught: Tmux command failed with message:not in a mode^@" when the target pane is scrolled
"let g:VimuxResetSequence = "C-c"

" =============================================================
" Coc Settings
" =============================================================

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
" UPDATE: Re-enable backup for avoiding data-loss reasons, let's see whether coc can
" handle it...
"set nobackup
"set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

hi CocUnusedHighlight ctermfg=250
hi CocMenuSel ctermbg=22
hi CocSearch ctermfg=184

if dotfilesTheme =~ '-light$'
  hi CocHighlightText ctermbg=248
endif

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

let g:coc_snippet_next = '<tab>'

"coc-emoji is triggered when typing ':'
let g:coc_global_extensions = [
      \'coc-snippets',
      \'coc-json',
      \'coc-tsserver',
      \'coc-prettier',
      \'coc-eslint',
      \'coc-css',
      \'coc-styled-components',
      \'https://github.com/andys8/vscode-jest-snippets',
      \'https://github.com/akamud/vscode-javascript-snippet-pack',
      \'@yaegassy/coc-tailwindcss3',
      \'coc-emmet',
      \'coc-python',
      \'coc-emoji',
      \'coc-dictionary',
      \'coc-word',
      \'coc-vimlsp',
      \'coc-sumneko-lua',
      \'coc-solargraph',
      \'coc-db',
      \]

" =============================================================
" End Coc Settings
" =============================================================

function! OpenRangerForCurrentFile()
  let bufferFilePath = expand('%') 
  VimuxRunCommand "ranger --selectfile='" . bufferFilePath . "'"
  VimuxZoomRunner
endfunction

function! JumpToSameIndent(direction, inVisualMode)
  let line = line('.')

  let currentLine = line
  let matchIndent = 0
  while !matchIndent && currentLine != line('$') + 1 && currentLine != -1
    let currentLine += a:direction == 'down' ? 1 : -1
    let lineText = getline(currentLine)
    let matchIndent = lineText !~ '^\s*$' && trim(lineText) !~ '^[\]\)\}]$' && indent(currentLine) == indent('.')
  endwhile

  if (matchIndent)
    if (a:inVisualMode)
      norm! gv
    endif

    execute 'norm! ' . currentLine . 'G'
  endif
endfunction

source $HOME/.dotfiles/vim/full/outline.vim
source $HOME/.dotfiles/vim/full/markdown-navigator.vim
source $HOME/.dotfiles/vim/full/statusline.vim
source $HOME/.dotfiles/vim/full/mappings.vim

let g:BufferNavigatorMapKeys = 0

" match buffer navigator colors with current theme
execute 'autocmd FileType buffernavigator highlight BufferNavigatorModifiedFile ctermfg=' . accentText . ' ctermbg=NONE' 
execute 'autocmd FileType buffernavigator highlight BufferNavigatorFile ctermfg=' . secondaryText . ' ctermbg=NONE' 

if dotfilesTheme =~ '-light$'
  autocmd FileType buffernavigator highlight BufferNavigatorDir ctermfg=0 ctermbg=NONE 
endif

highlight NormalFloat ctermbg=236

" For whatever reason, vim started to set the filetype for *.html files to sh
augroup fixHtmlFiletype
  au!
  autocmd BufNewFile,BufRead *.html  set ft=html
augroup END

augroup filetype_gitcommit
    autocmd!
    autocmd FileType gitcommit iab <buffer> <expr> wip "wip [skip ci]"
augroup END

" rhysd/conflict-marker.vim
let g:conflict_marker_highlight_group = ''
highlight ConflictMarkerOurs ctermbg=23
highlight ConflictMarkerTheirs ctermbg=58
highlight ConflictMarkerCommonAncestorsHunk ctermbg=237


let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.tsx, *.jsx'
let test#strategy = "vimux"
let g:test#echo_command = 0

autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx

" Enable TOC window auto-fit
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_folding_disabled = 1

" Customize highlight of markdown headlines depending on current theme
execute 'highlight htmlH1 ctermfg='.accentText
execute 'highlight htmlH2 ctermfg='.primaryText
execute 'highlight htmlH3 ctermfg='.secondaryText
execute 'highlight htmlH4 ctermfg='.secondaryText
execute 'highlight htmlH5 ctermfg='.secondaryText
execute 'highlight htmlH6 ctermfg='.secondaryText

" And one more for our markdown navigator plugin to make it independent of the
" vim-markdown plugin
execute 'highlight MarkdownNavigatorH1 ctermfg='.accentText
execute 'highlight MarkdownNavigatorH2 ctermfg='.primaryText
execute 'highlight MarkdownNavigatorH3 ctermfg='.secondaryText
execute 'highlight MarkdownNavigatorH4 ctermfg='.secondaryText
execute 'highlight MarkdownNavigatorH5 ctermfg='.secondaryText
execute 'highlight MarkdownNavigatorH6 ctermfg='.secondaryText

let g:vimtex_syntax_conceal_disable = 1

set dictionary+=/usr/share/dict/words

function! s:SpellCheck(bang, lang = "en")
  let prefix = ""
  if a:bang
    let prefix = "no" 
  endif
  execute "setlocal " . prefix . "spell spelllang=" . a:lang
endfunction

command! -nargs=? -bang SpellCheck :call <SID>SpellCheck(<bang>0, <f-args>)

function! s:ToggleWrite(bang, width)
  if a:bang
    Goyo! | Limelight!
    set nowrap nolinebreak
    colorscheme codedark
    hi Normal ctermbg=NONE
    hi EndOfBuffer ctermbg=NONE
    hi LineNr ctermbg=NONE
    hi SignColumn ctermbg=NONE
    nunmap <silent> <buffer> j
    nunmap <silent> <buffer> k
  else
    set wrap linebreak
    colorscheme seoul256
    execute "Goyo " . a:width . " | Limelight"
    nnoremap <silent> <buffer> j gj
    nnoremap <silent> <buffer> k gk
  endif
endfunction

command! -nargs=* -bang Write :call <SID>ToggleWrite(<bang>0, <q-args>)


let g:statuslineMode = "default"

" TODO :so can handle visual selection by itself, writing to tmp file necessary??
" TODO Add possibility for running vim9 scripts (:vim9 so)
function! SourceSelection() range
  let tmpFile = tempname()
  call writefile(getline(a:firstline, a:lastline), l:tmpFile)
  execute "source " . l:tmpFile
  call delete(l:tmpFile)
endfunction
command! -range SourceSelection let b:winview = winsaveview() | <line1>,<line2>call SourceSelection() | call winrestview(b:winview) | unlet b:winview

command! Themis :VimuxRunCommand expand("$HOME") . "/.vim/vim-plug/vim-themis/bin/themis " . expand("%")

function! ToggleStatusline()
  if g:statuslineMode == "default"
    let g:statuslineMode = "syntax"
    let &statusline = ' %{synIDattr(synID(line("."),col("."),1),"name")} - %{synIDattr(synIDtrans(synID(line("."),col("."),1)),"name")} '
  else
    let g:statuslineMode = "default"
    set statusline=%!StatusLine()
  endif 
endfunction


function! s:AlternateSafe()
  try
    A
  catch /^Vim\%((\a\+)\)\=:E345:/
    let path = matchstr(v:exception, '.*"\zs.*\ze".*')
    execute 'e ' . path
  endtry
endfunction

command! AlternateSafe :call <SID>AlternateSafe()

let g:projectionist_heuristics = { ".git/":
      \ { "lib/web/*_controller.rb": { "alternate": [ "spec/web/{}_request_spec.rb", 
      \                                               "spec/web/{}_get_request_spec.rb", 
      \                                               "spec/web/{}_post_request_spec.rb", 
      \                                               "spec/web/{}_patch_request_spec.rb", 
      \                                               "spec/web/{}_delete_request_spec.rb"] }, 
      \   "spec/web/*_get_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/web/*_post_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/web/*_patch_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/web/*_delete_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/web/*_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" }}
      \ }

augroup filetype_ruby
    autocmd!
    let rubySynGroups = ["rubyString", "rubyComment"]
    autocmd FileType ruby iab <buffer> <expr> de ExcludeSynGroupAbbr("de", "do<cr>end<esc>O", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> it ExcludeSynGroupAbbr("it", "it 'does' do<cr>end<esc>O", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> ctx ExcludeSynGroupAbbr("ctx", "context 'with sth' do<cr>end<esc>O", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> def ExcludeSynGroupAbbr("def", "def<cr>end<esc>kA", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> class ExcludeSynGroupAbbr("class", "class<cr>end<esc>kA", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> if ExcludeSynGroupAbbr("if", "if<cr>end<esc>kA", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> pry ExcludeSynGroupAbbr("pry", "require 'pry'; binding.pry", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> irb ExcludeSynGroupAbbr("irb", "binding.irb", rubySynGroups)

augroup END

augroup skeletons_ruby
  autocmd BufNewFile,BufReadPost *_spec\.rb if getline(1,'$') == [''] | 0r $HOME/.dotfiles/vim/full/skeletons/spec.rb | endif
  autocmd BufNewFile,BufReadPost *.rb if getline(1,'$') == [''] | 0r $HOME/.dotfiles/vim/full/skeletons/ruby.rb | endif
augroup END

let g:BufferNavigatorWidth = 50
let g:BufferNavigatorHighlightRules = [
      \["rubySpecDir", "dir", "spec", "NONE", "106", "NONE", "green"],
      \["rubySpecFile", "file", ".*_spec\.rb", "NONE", "154", "NONE", "green"],
      \]


let g:copilot_settings = #{selectedCompletionModel: 'gpt-4o-copilot'}
let g:copilot_filetypes = {
      \ 'gitcommit': v:true,
      \ }

if !empty($DOTFILES_NVIM) && has('nvim')
  "Copilot Chat Stuff
lua << EOF
local copilot_chat = require("CopilotChat")
copilot_chat.setup({
  build = function()
    vim.notify("Please update the remote plugins by running ':UpdateRemotePlugins', then restart Neovim.")
  end,
  event = "VeryLazy",
  mappings = {
    complete = "<C-x>",
    reset = "<leader>cr",
    accept_diff = "<leader>ca"
  }
})
EOF

command! -range CC CopilotChat
command! -range CT CopilotTests
endif
