primaryFg=colour$primaryFg
primaryBg=colour$primaryBg
primaryText=colour$primaryText
secondaryFg=colour$secondaryFg
secondaryBg=colour$secondaryBg
secondaryText=colour$secondaryText
accentBg=colour$accentBg
accentFg=colour$accentFg

inactivePaneBorder=colour$inactivePaneBorder
inactivePaneBackground=colour$inactivePaneBackground

criticalFg=colour$criticalFg
criticalBg=colour$criticalBg
warningFg=colour$warningFg
warningBg=colour$warningBg

bind r source-file $HOME/.tmux.conf \; display "Configuration reloaded successfully."
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %
bind Tab last-window
bind -n C-y last-window
bind -T copy-mode-vi C-y last-window
bind -n C-s resize-pane -Z
bind -T copy-mode-vi C-s resize-pane -Z
unbind l
bind F set -g status
unbind -
bind - select-pane -l
unbind n
unbind p
bind Right next-window
bind Left previous-window
bind C new-session -n ''
bind c new-window -n ''
bind n new-window -n '' -c "#{pane_current_path}" -a
unbind q
unbind <
bind -r < swap-pane -U
unbind >
bind -r > swap-pane -D
bind q display-panes -d 0
unbind w
bind w choose-tree -Zs
unbind =
bind = select-layout even-horizontal
unbind \#
bind \# select-layout main-vertical

# from https://stackoverflow.com/a/76543333
# Go to a session by its name (First letter is enough if it is unique, otherwise you can type more letters)
bind g command-prompt -p "(switch-session)" "run 'tmux switch -t $(tmux ls -F \"##{session_created}:##{session_name}\" | sort -n | grep \':%%\' | head -n 1 | cut -d \':\' -f 2)'"

setenv -g statusMode full
bind M setenv -F -g statusMode '#{?#{==:#{statusMode},full},minimal,full}'

bind S command-prompt -p "Target Window:" -T target "swap-window -d -t %1"

# Works only on Linux, needs vlock installed
#set -g lock-command vlock
#bind X lock-session

bind ! break-pane -n '' -a
bind \" join-pane -h -t ! 

#bind n new-window -n ' ' "$HOME/.dotfiles/tmux/blubb.sh"
#bind n send-keys -t $TMUX_PANE "clear && $HOME/.dotfiles/tmux/blubb.sh" Enter
bind e new-window -n ' ' "$HOME/.dotfiles/tmux/empty-pane.zsh"

unbind C-b
set -g prefix C-a

set -g base-index 1         # start windows numbering at 1
setw -g pane-base-index 1   # make pane numbering consistent with windows

set -g detach-on-destroy off

setw -g automatic-rename off # don't rename windows automatically

set -g renumber-windows on  # renumber windows when a window is closed
set -g set-titles on                        # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 1      # redraw status line every second

setw -g mouse on
setw -g mode-keys vi
set -g default-terminal "screen-256color"
set -g window-size smallest

set -g history-limit 10000

# enable activity alerts
setw -g monitor-activity on
set -g visual-activity on

set -g clock-mode-style 24

set -g status on
set -g status-justify left


set -g clock-mode-colour $primaryText

set -g pane-border-style fg=$inactivePaneBorder
set -g pane-active-border-style fg=$primaryBg
set -g pane-border-lines 'heavy'

set -g message-style bg=$accentBg,fg=$accentFg,bold

set -g status-style bg=terminal

set-window-option -g window-active-style bg=terminal
set-window-option -g window-style bg=$inactivePaneBackground

# TODO light theme
#set-window-option -g window-active-style bg=colour255,fg=colour238
#set-window-option -g window-style bg=colour252,fg=colour238

set-window-option -g window-status-activity-style fg=$primaryBg,bg=$primaryFg

pathOrName="#($HOME/.dotfiles/tmux/pathOrName.zsh '#{pane_current_path}' '#W')"

set -g window-status-current-format " #[fg=$accentFg,bg=$accentBg,bold,fill=$primaryBg]#{?window_zoomed_flag,[, }#I $pathOrName#{?window_zoomed_flag,], }#[default]#{?window_end_flag, ,}"
set -g window-status-format " #[fg=$primaryFg,bg=$primaryBg,fill=$primaryBg]#{?window_zoomed_flag,[, }#I $pathOrName#{?window_zoomed_flag,], }#[default]#{?window_end_flag, ,}"

windowsThreshold=6

sessionName="#[fg=$primaryBg,bg=terminal,bold]#{?#{e,>=:#S,0},, #S}"
left="#[bg=$primaryBg]#{?#{==:#{s/root//:client_key_table},manage_mode},#[fg=$accentFg#,bg=$accentBg#,bold] MANAGE,} #[default]"

windowList="#{W:#{E:window-status-format},#{E:window-status-current-format}}#[default]"

dateTime="#[fg=$secondaryText#,bg=terminal]$date $time#[default] "
dateTimeLight="#[fg=$secondaryText#,bg=terminal]$time#[default] "

#sessionList="#{S:#[fg=$secondaryBg,bg=terminal] #{?#{==:#S,#(tmux display-message -p '##S')},#[fg=$accentBg]#[bold],}#S #[bg=$secondaryBg] #[default]}"
sessionList="#[default] #{S:#[fg=$primaryFg,bg=$primaryBg]#{?#{==:#S,#(tmux display-message -p '##S')},#[bg=$accentBg]#[fg=$accentFg]#[bold],} #S #[default] }"
sessionListLight="#[default] #{S:#[fg=$primaryFg,bg=$primaryBg]#{?#{==:#S,#(tmux display-message -p '##S')},#[bg=$accentBg]#[fg=$accentFg]#[bold],} #[default] }"

# Running `echo $(tmux list-sessions | wc -l)` to trim the result, otherwise on osx it would be "       1" instead of "1"
sessionListIfMoreThanOne="#{?#{==:1,#(echo $(tmux list-sessions | wc -l))}, ,$sessionList}"
sessionListIfMoreThanOneLight="#{?#{==:1,#(echo $(tmux list-sessions | wc -l))}, ,$sessionListLight}"

rightFull="$sessionListIfMoreThanOne$dateTime#($network)#($mediaInfo)#($freeSpace) #[default] #($battery) "
rightLight="$sessionListIfMoreThanOneLight$dateTimeLight#($network)#($battery) "

right="#[align=right]#{?#{==:#{statusMode},minimal},$rightLight,$rightFull}#[default]"

set -g status-format[0] "$left$windowList$right" 

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"

bind -T copy-mode-vi C-h select-pane -L
bind -T copy-mode-vi C-j select-pane -D
bind -T copy-mode-vi C-k select-pane -U
bind -T copy-mode-vi C-l select-pane -R


bind i copy-mode
bind -T copy-mode-vi J send-keys -X -N 3 scroll-down
bind -T copy-mode-vi K send-keys -X -N 3 scroll-up
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel $copyCmd
bind -T copy-mode-vi r send-keys -X rectangle-toggle
bind p run "tmux set-buffer \"$($pasteCmd)\"" \; paste-buffer

bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5

# restore normal ctrl-l behaviour (clear console)
#unbind -T C-l
#unbind -n C-l

unbind m
bind m switch-client -T manage_mode

bind -T manage_mode h select-pane -L \; switch-client -T manage_mode
bind -T manage_mode j select-pane -D \; switch-client -T manage_mode
bind -T manage_mode k select-pane -U \; switch-client -T manage_mode
bind -T manage_mode l select-pane -R \; switch-client -T manage_mode

bind -T manage_mode z resize-pane -Z \; switch-client -T manage_mode

bind -T manage_mode K resize-pane -U \; switch-client -T manage_mode
bind -T manage_mode J resize-pane -D \; switch-client -T manage_mode
bind -T manage_mode H resize-pane -L \; switch-client -T manage_mode
bind -T manage_mode L resize-pane -R \; switch-client -T manage_mode

bind -T manage_mode p display-panes -d 0 \; switch-client -T manage_mode
bind -T manage_mode x kill-pane \; switch-client -T manage_mode
bind -T manage_mode - select-pane -l \; switch-client -T manage_mode         
bind -T manage_mode < swap-pane -U \; switch-client -T manage_mode
bind -T manage_mode > swap-pane -D \; switch-client -T manage_mode

bind -T manage_mode ! break-pane \; switch-client -T manage_mode
bind -T manage_mode \" join-pane -h -t ! \; switch-client -T manage_mode

bind -T manage_mode c new-window -n '' \; switch-client -T manage_mode
bind -T manage_mode Tab last-window \; switch-client -T manage_mode

bind -T manage_mode w choose-tree -Zs \; switch-client -T manage_mode
bind -T manage_mode C new-session -n '' \; switch-client -T manage_mode
bind -T manage_mode ( switch-client -p \; switch-client -T manage_mode
bind -T manage_mode ) switch-client -n \; switch-client -T manage_mode

bind -T manage_mode 1 select-window -t 1 \; switch-client -T manage_mode
bind -T manage_mode 2 select-window -t 2 \; switch-client -T manage_mode
bind -T manage_mode 3 select-window -t 3 \; switch-client -T manage_mode
bind -T manage_mode 4 select-window -t 4 \; switch-client -T manage_mode
bind -T manage_mode 5 select-window -t 5 \; switch-client -T manage_mode
bind -T manage_mode 6 select-window -t 6 \; switch-client -T manage_mode
bind -T manage_mode 7 select-window -t 7 \; switch-client -T manage_mode
bind -T manage_mode 8 select-window -t 8 \; switch-client -T manage_mode
bind -T manage_mode 9 select-window -t 9 \; switch-client -T manage_mode

bind -T manage_mode v split-window -h -c "#{pane_current_path}" \; switch-client -T manage_mode
bind -T manage_mode s split-window -v -c "#{pane_current_path}" \; switch-client -T manage_mode

bind -T manage_mode i copy-mode

#TODO
#get info about currently playing vlc track
#qdbus org.mpris.MediaPlayer2.vlc /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Metadata
#e.g. get title:
#qdbus org.mpris.MediaPlayer2.vlc /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Metadata | grep "xesam:title:" | cut -c 14-
